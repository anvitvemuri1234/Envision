//
//  AdminPAE.swift
//  MobileAppDevelopment#2
//
//  Created by Anvit Vemuri on 4/26/24.
//

import SwiftUI
import FirebaseFirestore
import FirebaseAuth

struct AdminPAE: View {
    var selectedUserID: String
    @State private var performingArtsExperiences: [Achievement] = []
    @State private var showAlert = false
    @State private var errorMessage = ""
    @State private var successMessage = ""
    @State private var navigateToFinalStatsManager = false
    
    struct Achievement {
        var name: String
        var grade: String
        var description: String
        var isEditing: Bool = false
    }
    
    var body: some View {
        ZStack {
            Color(.systemMint)
                .ignoresSafeArea()
            
            ScrollView {
                VStack {
                    
                    Text("Performing Arts Experiences Viewing & Editing Page")
                        .font(.largeTitle)
                        .multilineTextAlignment(.center)
                        .foregroundColor(.blue)
                        .frame(width: 375, height: 125)
                        .background(.white)
                        .cornerRadius(20)
                    
                    Text("This page allows you to view and edit the selected student's performing arts experiences. By clicking on the edit button, you can also edit the student's experience. Clicking on the save button will save your changes immediately.")
                        .font(.title3)
                        .multilineTextAlignment(.center)
                        .foregroundColor(.white)
                        .frame(width: 385, height: 150)
                        .background(.black)
                        .cornerRadius(10)
                    
                    Text("Total Number of Performing Arts Experiences: \(performingArtsExperiences.count)")
                        .multilineTextAlignment(.center)
                        .font(.headline)
                        .foregroundColor(.green)
                        .frame(width: 375, height: 50)
                        .background(.purple)
                        .cornerRadius(10)
                    
                    Button(action: {
                        for index in performingArtsExperiences.indices {
                            performingArtsExperiences[index].isEditing.toggle()
                        }
                    }) {
                        Text("Click here to edit any experience")
                            .font(.headline)
                            .foregroundColor(.blue)
                            .frame(width: 300, height: 45)
                            .background(.yellow)
                            .cornerRadius(10)
                    }
                    
                    ForEach(performingArtsExperiences.indices, id: \.self) { index in
                        VStack() {
                            
                            if performingArtsExperiences[index].isEditing {
                                TextField("Name", text: $performingArtsExperiences[index].name)
                                    .padding()
                                    .background(Color.white)
                                    .cornerRadius(5)
                                TextField("Grade", text: $performingArtsExperiences[index].grade)
                                    .padding()
                                    .background(Color.white)
                                    .cornerRadius(5)
                                    .keyboardType(.numberPad) // Restrict input to numbers only
                                TextEditor(text: $performingArtsExperiences[index].description)
                                    .frame(height: 100)
                                    .padding()
                                    .background(Color.white)
                                    .cornerRadius(5)
                            } else {
                                Text("Name of Academic Achievement #\(index + 1): \(performingArtsExperiences[index].name) \nGrade: \(performingArtsExperiences[index].grade)\nDescription: \(performingArtsExperiences[index].description)")
                                    .font(.subheadline)
                                    .foregroundColor(.black)
                                    .padding()
                                    .frame(maxWidth: 385, alignment: .leading)
                                    .background(.white)
                                    .cornerRadius(20)
                            }
                            
                            Divider() // Add a divider between each achievement
                        }
                    }
                    
                    Button(action: {
                        if validateGrades() {
                            saveChanges()
                        } else {
                            showAlert = true
                        }
                    }) {
                        Text("Save All Changes")
                            .font(.headline)
                            .foregroundColor(.white)
                            .frame(width: 300, height: 30)
                            .background(.green)
                            .cornerRadius(10)
                    }
                }
                .padding()
            }
        }
        .alert(isPresented: $showAlert) {
            if errorMessage.isEmpty {
                return Alert(title: Text("Success. Data is Saved!"), message: Text(successMessage), dismissButton: .default(Text("OK")) {

                    navigateToFinalStatsManager = true
                })
            } else {
                return Alert(title: Text("Error"), message: Text(errorMessage), dismissButton: .default(Text("OK")))
            }
        }

        .onAppear {
            fetchAcademicAchievements()
        }
    }
    
    private func fetchAcademicAchievements() {
        let db = Firestore.firestore()
        let userID = Auth.auth().currentUser?.uid ?? ""
        guard !userID.isEmpty else {
            print("User ID is empty.")
            return
        }
        
        let docRef = db.collection("usersData").document(selectedUserID)
        docRef.getDocument { document, error in
            if let document = document, document.exists {
                if let performingArtsExperiencesData = document.data()?["performingArtsExperiences"] as? [[String: Any]] {
                    self.performingArtsExperiences = performingArtsExperiencesData.map { achievement in
                        guard let name = achievement["performingArtsExperienceName"] as? String,
                              let grade = achievement["grade"] as? String,
                              let description = achievement["description"] as? String else {
                            return Achievement(name: "", grade: "", description: "")
                        }
                        return Achievement(name: name, grade: grade, description: description)
                    }
                }
            } else {
                print("You have no performing arts experiences.")
            }
        }
    }
    
    private func validateGrades() -> Bool {
        for achievement in performingArtsExperiences {
            if let grade = Double(achievement.grade), (9...12).contains(Int(grade)) {
                continue
            } else {
                errorMessage = "Grade has to be a number between 9-12"
                return false
            }
        }
        return true
    }
    
    private func saveChanges() {
        let db = Firestore.firestore()
        let userID = selectedUserID
        guard !userID.isEmpty else {
            print("User ID is empty.")
            return
        }
        
        let docRef = db.collection("usersData").document(userID)
        var achievementsData: [[String: Any]] = []
        for achievement in performingArtsExperiences {
            let data: [String: Any] = [
                "achievementName": achievement.name,
                "grade": achievement.grade,
                "description": achievement.description
            ]
            achievementsData.append(data)
        }
        
        docRef.setData(["performingArtsExperiences": achievementsData], merge: true) { error in
            if let error = error {
                print("Error saving data: \(error)")
                errorMessage = "Failed to save changes. Please try again."
                showAlert = true // Display error message
            } else {
                print("Data saved successfully.")
                successMessage = "Changes saved successfully."
                showAlert = true // Display success message
                errorMessage = "" // Reset error message
            }
        }
    }
}

struct AdminPAE_Previews: PreviewProvider {
    static var previews: some View {
        AdminPAE(selectedUserID: "SampleUserID")
    }
}
